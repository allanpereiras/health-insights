# Generated by Django 3.1.5 on 2022-10-05 13:17

import logging

from django.db import migrations

logger = logging.getLogger(__name__)


class Migration(migrations.Migration):
    def create_insights_state_values(self, schema_editor):
        logger.setLevel(logging.INFO)
        HealthInsight = self.get_model("insights", "HealthInsight")
        HealthInsightStateValue = self.get_model("insights", "HealthInsightStateValue")
        try:
            health_score = HealthInsight.objects.get(marker__name="Health Score")
            steps = HealthInsight.objects.get(marker__name="Steps")
            resting_rh = HealthInsight.objects.get(marker__name="Resting Heart Rate")
            sleep = HealthInsight.objects.get(marker__name="Sleep Duration")
            calories = HealthInsight.objects.get(marker__name="Calories Burned")
        except HealthInsight.DoesNotExist:
            logger.info("Could not find HealthInsight expected objects")
            return

        RISK = "Risk"
        WARNING = "Warning"
        SUCCESS = "Success"

        data = {
            health_score: [
                {"state": RISK, "lower_limit": None, "upper_limit": 69},
                {"state": WARNING, "lower_limit": 70, "upper_limit": 78},
                {"state": SUCCESS, "lower_limit": 79, "upper_limit": None},
            ],
            steps: [
                {"state": WARNING, "lower_limit": None, "upper_limit": 9999},
                {"state": SUCCESS, "lower_limit": 10000, "upper_limit": None},
            ],
            resting_rh: [
                {
                    "state": SUCCESS,
                    "lower_limit": None,
                    "upper_limit": 60,
                    "applies_to_gender": "Male",
                    "reversed_cumulative": True,
                },
                {
                    "state": SUCCESS,
                    "lower_limit": None,
                    "upper_limit": 80,
                    "applies_to_gender": "Female",
                    "reversed_cumulative": True,
                },
                {
                    "state": WARNING,
                    "lower_limit": 61,
                    "upper_limit": None,
                    "applies_to_gender": "Male",
                    "reversed_cumulative": True,
                },
                {
                    "state": WARNING,
                    "lower_limit": 81,
                    "upper_limit": None,
                    "applies_to_gender": "Female",
                    "reversed_cumulative": True,
                },
            ],
            sleep: [
                {"state": WARNING, "lower_limit": None, "upper_limit": 6.99},
                {"state": SUCCESS, "lower_limit": 7, "upper_limit": None},
            ],
            calories: [
                {"state": WARNING, "lower_limit": None, "upper_limit": 499},
                {"state": SUCCESS, "lower_limit": 500, "upper_limit": None},
            ],
        }

        for h, objs in data.items():
            created = HealthInsightStateValue.objects.bulk_create(
                [HealthInsightStateValue(health_insight=h, **kwargs) for kwargs in objs]
            )
            logger.info(f"Created {len(created)} State objects for HealthInsight {h}")

    dependencies = [
        ("insights", "0020_squashed_0024_healthinsightstatevalue"),
    ]

    operations = [
        migrations.RunPython(create_insights_state_values, migrations.RunPython.noop),
    ]
