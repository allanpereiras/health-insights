# Generated by Django 3.1.5 on 2022-11-1 13:17

from django.db import IntegrityError, migrations


class Migration(migrations.Migration):
    def update_health_score(self, schema_editor):
        """Move Health Score Insight to CLARITY_CORE Distributor and
        Backfill health core Insight for existing patients
        """
        DistributorMarker = self.get_model("insights", "DistributorMarker")
        DataDistributor = self.get_model("insights", "DataDistributor")
        Marker = self.get_model("insights", "Marker")
        Statistic = self.get_model("insights", "Statistic")
        HealthInsight = self.get_model("insights", "HealthInsight")
        PatientHealthInsight = self.get_model("insights", "PatientHealthInsight")
        HealthScoreModelPatientScore = self.get_model(
            "scoring", "HealthScoreModelPatientScore"
        )

        marker, _ = Marker.objects.get_or_create(name="Health Score")
        distrib, _ = DataDistributor.objects.get_or_create(name="CLARITY_CORE")
        statistic, _ = Statistic.objects.get_or_create(name="MAX")
        health_insight = HealthInsight.objects.get_or_create(
            marker=marker, statistic=statistic
        )
        health_insight, _ = HealthInsight.objects.get_or_create(
            marker=marker,
            statistic=statistic
        )
        DistributorMarker.objects.get_or_create(
            marker=marker,
            distributor=distrib,
            name="Clarity Core Health Score",
        )  # Ensure health score Dist. Marker
        # From here on Health Score Insight is under CLARITY_CORE Distributor
        for_patients = (
            PatientHealthInsight.objects.all().values("patient_id").distinct()
        )
        qs_scores = HealthScoreModelPatientScore.objects.filter(
            patient__in=for_patients, score__isnull=False
        )
        for hs in qs_scores:
            params = {
                "patient": hs.patient,
                "health_insight": health_insight,
                "data_distributor": distrib,
                "value": hs.score,
                "collection_date": hs.created_at.date(),
            }
            try:
                PatientHealthInsight.objects.get_or_create(**params)
            except IntegrityError as e: 
                # Already exists for that patient/collection_date
                print(f"IntegrityError: {e}")

    dependencies = [
        (
            "scoring",
            "0042_auto_20220503_2040_squashed_0046_ascvdpatientscore_ascvdscoremodel_ascvdscoremodelspecification",
        ),
        ("insights", "0026_null_data_distributor_on_patient_health_insight"),
    ]

    operations = [
        migrations.RunPython(update_health_score, migrations.RunPython.noop),
    ]
